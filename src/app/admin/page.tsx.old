'use client';

import { useState, useEffect } from 'react';
import { dbService } from '@/lib/supabase';
import { Question } from '@/types/database';
import { DashboardStats, QuestionsData, DeletingState } from '@/types/admin';
import StatCard from '@/components/StatCard';
import QuickActionCard from '@/components/QuickActionCard';
import QuestionsList from '@/components/QuestionsList';
import QuestionEditor from '@/components/QuestionEditor';
import Filters from '@/components/Filters';
import { 
  BookOpen, 
  HelpCircle, 
  FolderOpen, 
  TrendingUp,
  Activity,
  Star,
  Eye,
  Plus,
  Search,
  Filter,
  ChevronLeft,
  ChevronRight,
  ChevronDown,
  ChevronUp,
  Edit,
  Save,
  X,
  Trash2,
} from 'lucide-react';

export default function AdminDashboard() {
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [allQuestions, setAllQuestions] = useState<Question[]>([]);
  const [questionsLoading, setQuestionsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [expandedQuestions, setExpandedQuestions] = useState<Set<string>>(new Set());
  const [selectedExamCode, setSelectedExamCode] = useState<string>('');
  const [availableExamCodes, setAvailableExamCodes] = useState<string[]>([]);
  const [searchText, setSearchText] = useState<string>('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [availableCategories, setAvailableCategories] = useState<string[]>([]);
  const [editingQuestion, setEditingQuestion] = useState<Question | null>(null);
  const [saving, setSaving] = useState(false);
  const [examCategories, setExamCategories] = useState<string[]>([]);
  const [deleting, setDeleting] = useState<DeletingState>({});
  
  // Client-side filtering and pagination
  const questionsPerPage = 20;
  let filteredQuestions = selectedExamCode === '' 
    ? [] 
    : allQuestions.filter(q => q.exam_code === selectedExamCode);
  
  // Apply category filter if a specific category is selected
  if (selectedCategory !== 'all') {
    filteredQuestions = filteredQuestions.filter(q => q.category === selectedCategory);
  }
  
  // Apply text search filter if search text is provided
  if (searchText.trim() !== '') {
    filteredQuestions = filteredQuestions.filter(q => 
      q.question.toLowerCase().includes(searchText.toLowerCase()) ||
      (q.answers && q.answers.some(answer => 
        answer.text.toLowerCase().includes(searchText.toLowerCase())
      )) ||
      (q.explanation && q.explanation.toLowerCase().includes(searchText.toLowerCase()))
    );
  }

  useEffect(() => {
    loadDashboardStats();
  }, []);

  useEffect(() => {
    if (activeTab === 'questions') {
      setCurrentPage(1);
      setSelectedExamCode('');
      setAllQuestions([]); // Clear questions
      loadExamCodes();
    }
  }, [activeTab]);

  const loadExamCodes = async () => {
    try {
      console.log('Loading exam codes separately...');
      const examCodes = await dbService.getExamCodes();
      console.log('Exam codes loaded separately:', examCodes);
      setAvailableExamCodes(examCodes);
    } catch (error) {
      console.error('Error loading exam codes:', error);
    }
  };

  const loadDashboardStats = async () => {
    try {
      setError(null);
      console.log('Loading dashboard stats...');
      const data = await dbService.getDashboardStats();
      console.log('Stats loaded successfully:', data);
      setStats(data);
    } catch (error) {
      console.error('Error loading dashboard stats:', error);
      setError('Failed to load dashboard data. Please check your connection.');
    } finally {
      setLoading(false);
    }
  };

  const loadAllQuestions = async () => {
    try {
      setQuestionsLoading(true);
      console.log('Loading all questions...');
      
      // Use the new getAllQuestions method that doesn't use pagination
      const questions = await dbService.getAllQuestions();
      console.log('All questions loaded successfully:', questions.length);
      setAllQuestions(questions);
    } catch (error) {
      console.error('Error loading questions:', error);
      setError('Failed to load questions data. Please check your connection.');
    } finally {
      setQuestionsLoading(false);
    }
  };

  const loadQuestionsForExamCode = async (examCode: string) => {
    try {
      setQuestionsLoading(true);
      console.log('Loading questions for exam code:', examCode);
      
      // Load questions for specific exam code directly
      const questions = await dbService.getQuestionsByExamCode(examCode);
      console.log('Questions loaded for exam code:', examCode, questions.length);
      setAllQuestions(questions);
      
      // Extract unique categories from loaded questions
      const categories = [...new Set(questions
        .map((q: any) => q.category)
        .filter((category: any) => category && category.trim() !== '')
      )].sort() as string[];
      console.log('Available categories for', examCode, ':', categories);
      setAvailableCategories(categories);
      setSelectedCategory('all'); // Reset category filter
    } catch (error) {
      console.error('Error loading questions:', error);
      setError('Failed to load questions data. Please check your connection.');
    } finally {
      setQuestionsLoading(false);
    }
  };

  const toggleQuestionExpanded = (questionId: string) => {
    setExpandedQuestions(prev => {
      const newSet = new Set(prev);
      if (newSet.has(questionId)) {
        newSet.delete(questionId);
      } else {
        newSet.add(questionId);
      }
      return newSet;
    });
  };

  const openQuestionEditor = (question: Question) => {
    setEditingQuestion({ ...question }); // Create a copy for editing
    // Load categories for the exam code
    loadExamCategories(question.exam_code || '');
  };

  const loadExamCategories = async (examCode: string) => {
    if (!examCode) return;
    
    try {
      console.log('Loading categories for exam code:', examCode);
      const categories = await dbService.getCategoriesByExamCode(examCode);
      console.log('Categories loaded:', categories);
      setExamCategories(categories);
    } catch (error) {
      console.error('Error loading exam categories:', error);
      setExamCategories([]);
    }
  };

  const closeQuestionEditor = () => {
    setEditingQuestion(null);
  };

  const updateEditingQuestion = (field: string, value: any) => {
    if (!editingQuestion) return;
    setEditingQuestion({
      ...editingQuestion,
      [field]: value
    });
  };

  const updateAnswer = (answerIndex: number, field: string, value: any) => {
    if (!editingQuestion || !editingQuestion.answers) return;
    const updatedAnswers = [...editingQuestion.answers];
    updatedAnswers[answerIndex] = {
      ...updatedAnswers[answerIndex],
      [field]: value
    };
    setEditingQuestion({
      ...editingQuestion,
      answers: updatedAnswers
    });
  };

  const addAnswer = () => {
    if (!editingQuestion) return;
    const newAnswers = editingQuestion.answers || [];
    setEditingQuestion({
      ...editingQuestion,
      answers: [...newAnswers, { text: '', isCorrect: false }]
    });
  };

  const removeAnswer = (answerIndex: number) => {
    if (!editingQuestion || !editingQuestion.answers) return;
    const updatedAnswers = editingQuestion.answers.filter((_, index) => index !== answerIndex);
    setEditingQuestion({
      ...editingQuestion,
      answers: updatedAnswers
    });
  };

  const saveQuestion = async () => {
    if (!editingQuestion) return;
    
    try {
      setSaving(true);
      console.log('Saving question:', editingQuestion);
      
      // Call the backend to update the question
      await dbService.updateQuestion(editingQuestion);
      
      // Update the local state
      setAllQuestions(prev => 
        prev.map(q => q.id === editingQuestion.id ? editingQuestion : q)
      );
      
      console.log('Question saved successfully');
      closeQuestionEditor();
    } catch (error) {
      console.error('Error saving question:', error);
      setError('Failed to save question. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  const deleteQuestion = async (questionId: string) => {
    if (!confirm('Are you sure you want to delete this question? This action cannot be undone.')) {
      return;
    }
    
    try {
      setSaving(true);
      console.log('Deleting question:', questionId);
      
      // Call the backend to delete the question
      await dbService.deleteQuestion(questionId);
      
      // Update the local state
      setAllQuestions(prev => prev.filter(q => q.id !== questionId));
      
      console.log('Question deleted successfully');
      if (editingQuestion?.id === questionId) {
        closeQuestionEditor();
      }
    } catch (error) {
      console.error('Error deleting question:', error);
      setError('Failed to delete question. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-zinc-800 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border border-zinc-600 border-t-white mx-auto mb-4"></div>
          <p className="text-sm text-zinc-400">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-zinc-800 flex items-center justify-center">
        <div className="text-center">
          <div className="bg-zinc-900 border border-red-700 rounded-lg p-6 max-w-md">
            <h2 className="text-lg font-medium text-red-400 mb-2">Connection Error</h2>
            <p className="text-sm text-red-300 mb-4">{error}</p>
            <button 
              onClick={loadDashboardStats}
              className="bg-red-600 hover:bg-red-700 text-white text-sm px-4 py-2 rounded-md transition-colors"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-zinc-800">
      {/* Header */}
      <header className="bg-zinc-900 border-b border-zinc-700">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-xl font-medium text-white">EF Admin Dashboard</h1>
              <p className="text-sm text-zinc-400">Exam Management System</p>
            </div>
            <div className="flex items-center space-x-3">
              <button className="bg-green-600 hover:bg-green-700 text-white text-sm px-4 py-2 rounded-md transition-colors flex items-center space-x-2">
                <Plus className="h-4 w-4" />
                <span>Insert</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <div className="bg-zinc-900 border-b border-zinc-700">
        <div className="max-w-7xl mx-auto px-6">
          <nav className="flex space-x-6">
            {[
              { id: 'overview', name: 'Overview', icon: Activity },
              { id: 'exams', name: 'Exams', icon: BookOpen },
              { id: 'questions', name: 'Questions', icon: HelpCircle },
              { id: 'categories', name: 'Categories', icon: FolderOpen },
              { id: 'analytics', name: 'Analytics', icon: TrendingUp },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 py-3 px-1 border-b-2 text-sm transition-colors ${
                  activeTab === tab.id
                    ? 'border-green-500 text-white'
                    : 'border-transparent text-zinc-400 hover:text-zinc-300'
                }`}
              >
                <tab.icon className="h-4 w-4" />
                <span>{tab.name}</span>
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-6 py-6">
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4">
              <StatCard
                icon={BookOpen}
                title="Total Exams"
                value={stats?.totalExams || 0}
                subtitle={`${stats?.activeExams || 0} active`}
                color="bg-zinc-700"
              />
              <StatCard
                icon={HelpCircle}
                title="Total Questions"
                value={stats?.totalQuestions || 0}
                color="bg-zinc-700"
              />
              <StatCard
                icon={FolderOpen}
                title="Categories"
                value={stats?.totalCategories || 0}
                color="bg-zinc-700"
              />
              <StatCard
                icon={TrendingUp}
                title="Competitor Analysis"
                value={stats?.totalCompetitors || 0}
                color="bg-zinc-700"
              />
              <StatCard
                icon={Star}
                title="Featured Exams"
                value={stats?.featuredExams || 0}
                color="bg-zinc-700"
              />
              <StatCard
                icon={Eye}
                title="Active Exams"
                value={stats?.activeExams || 0}
                subtitle="Live on platform"
                color="bg-zinc-700"
              />
            </div>

            {/* Quick Actions */}
            <div>
              <h2 className="text-lg font-medium text-white mb-4">Quick Actions</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                <QuickActionCard
                  icon={Plus}
                  title="Create New Exam"
                  description="Add a new exam with questions and categories"
                  onClick={() => setActiveTab('exams')}
                  color="bg-zinc-700"
                />
                <QuickActionCard
                  icon={HelpCircle}
                  title="Add Questions"
                  description="Create new questions for existing exams"
                  onClick={() => setActiveTab('questions')}
                  color="bg-zinc-700"
                />
                <QuickActionCard
                  icon={TrendingUp}
                  title="View Analytics"
                  description="Check exam performance and competitor analysis"
                  onClick={() => setActiveTab('analytics')}
                  color="bg-zinc-700"
                />
                <QuickActionCard
                  icon={FolderOpen}
                  title="Manage Categories"
                  description="Organize questions into categories"
                  onClick={() => setActiveTab('categories')}
                  color="bg-zinc-700"
                />
                <QuickActionCard
                  icon={Search}
                  title="Search Content"
                  description="Find specific exams, questions, or data"
                  onClick={() => {}}
                  color="bg-zinc-700"
                />
                <QuickActionCard
                  icon={Filter}
                  title="Bulk Operations"
                  description="Perform bulk updates and maintenance"
                  onClick={() => {}}
                  color="bg-zinc-700"
                />
              </div>
            </div>

            {/* Recent Activity */}
            <div>
              <h2 className="text-lg font-medium text-white mb-4">Recent Activity</h2>
              <div className="bg-zinc-900 border border-zinc-700 rounded-lg">
                <div className="p-4">
                  <div className="space-y-3">
                    {[
                      {
                        action: 'Dashboard loaded successfully',
                        target: `${stats?.totalExams || 0} exams, ${stats?.totalQuestions || 0} questions`,
                        time: 'Just now',
                        type: 'success'
                      },
                      {
                        action: 'System ready',
                        target: 'All services operational',
                        time: '1 minute ago',
                        type: 'info'
                      }
                    ].map((activity, index) => (
                      <div key={index} className="flex items-center justify-between py-2 border-b border-zinc-700 last:border-b-0">
                        <div className="flex items-center space-x-3">
                          <div className={`w-1.5 h-1.5 rounded-full ${
                            activity.type === 'success' ? 'bg-green-500' :
                            activity.type === 'info' ? 'bg-blue-500' :
                            activity.type === 'warning' ? 'bg-yellow-500' : 'bg-zinc-500'
                          }`}></div>
                          <div>
                            <p className="text-sm text-white">{activity.action}</p>
                            <p className="text-xs text-zinc-400">{activity.target}</p>
                          </div>
                        </div>
                        <div className="text-xs text-zinc-500">{activity.time}</div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Questions Tab */}
        {activeTab === 'questions' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-xl font-medium text-white">Questions Management</h2>
                <p className="text-sm text-zinc-400">Filter by active exam codes and view questions</p>
              </div>
              <button className="bg-green-600 hover:bg-green-700 text-white text-sm px-4 py-2 rounded-md transition-colors flex items-center space-x-2">
                <Plus className="h-4 w-4" />
                <span>Add Question</span>
              </button>
            </div>

            {/* Filter Buttons and Search */}
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <Filter className="h-4 w-4 text-zinc-400" />
                <span className="text-sm text-zinc-400">Filter by Exam Code:</span>
                <button
                  onClick={() => {
                    console.log('Refreshing exam codes...');
                    loadExamCodes();
                  }}
                  className="px-2 py-1 bg-zinc-700 hover:bg-zinc-600 text-white text-xs rounded transition-colors"
                  title="Refresh exam codes"
                >
                  ↻
                </button>
              </div>
              
              <div className="flex flex-wrap gap-2">
                {/* No default "All" button - questions only load when exam code is selected */}
                {availableExamCodes.map((examCode) => {
                  const examCodeCount = allQuestions.filter(q => q.exam_code === examCode).length;
                  return (
                    <button
                      key={examCode}
                      onClick={() => {
                        console.log('Filter changed to:', examCode);
                        setSelectedExamCode(examCode);
                        setCurrentPage(1);
                        setSearchText(''); // Clear search when changing exam code
                        setSelectedCategory('all'); // Reset category filter
                        loadQuestionsForExamCode(examCode);
                      }}
                      className={`px-3 py-2 text-sm rounded-md transition-colors ${
                        selectedExamCode === examCode
                          ? 'bg-green-600 text-white'
                          : 'bg-zinc-700 text-zinc-300 hover:bg-zinc-600'
                      }`}
                    >
                      {examCode} {selectedExamCode === examCode ? `(${examCodeCount})` : ''}
                    </button>
                  );
                })}

                {availableExamCodes.length === 0 && (
                  <span className="text-xs text-zinc-500 px-3 py-2">Loading active exam codes...</span>
                )}
              </div>

              {/* Search Filter - Only show when exam code is selected */}
              {selectedExamCode !== '' && (
                <div className="flex items-center space-x-2">
                  <Search className="h-4 w-4 text-zinc-400" />
                  <div className="flex-1 max-w-md">
                    <input
                      type="text"
                      placeholder="Search in questions, answers, or explanations..."
                      value={searchText}
                      onChange={(e) => {
                        setSearchText(e.target.value);
                        setCurrentPage(1); // Reset to first page when searching
                      }}
                      className="w-full px-3 py-2 bg-zinc-800 border border-zinc-600 rounded-md text-white text-sm placeholder-zinc-400 focus:outline-none focus:border-green-500 transition-colors"
                    />
                  </div>
                  {searchText && (
                    <button
                      onClick={() => {
                        setSearchText('');
                        setCurrentPage(1);
                      }}
                      className="px-2 py-2 bg-zinc-700 hover:bg-zinc-600 text-zinc-400 text-xs rounded transition-colors"
                      title="Clear search"
                    >
                      ✕
                    </button>
                  )}
                </div>
              )}

              {/* Category Filter - Only show when exam code is selected and categories are available */}
              {selectedExamCode !== '' && availableCategories.length > 0 && (
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <FolderOpen className="h-4 w-4 text-zinc-400" />
                    <span className="text-sm text-zinc-400">Filter by Category:</span>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    <button
                      onClick={() => {
                        console.log('Category filter changed to: all');
                        setSelectedCategory('all');
                        setCurrentPage(1);
                      }}
                      className={`px-3 py-2 text-sm rounded-md transition-colors ${
                        selectedCategory === 'all'
                          ? 'bg-blue-600 text-white'
                          : 'bg-zinc-700 text-zinc-300 hover:bg-zinc-600'
                      }`}
                    >
                      All Categories ({allQuestions.length})
                    </button>
                    {availableCategories.map((category) => {
                      const categoryCount = allQuestions.filter(q => q.category === category).length;
                      return (
                        <button
                          key={category}
                          onClick={() => {
                            console.log('Category filter changed to:', category);
                            setSelectedCategory(category);
                            setCurrentPage(1);
                          }}
                          className={`px-3 py-2 text-sm rounded-md transition-colors ${
                            selectedCategory === category
                              ? 'bg-blue-600 text-white'
                              : 'bg-zinc-700 text-zinc-300 hover:bg-zinc-600'
                          }`}
                        >
                          {category} ({categoryCount})
                        </button>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>

            {questionsLoading ? (
              <div className="bg-zinc-900 border border-zinc-700 rounded-lg p-8 text-center">
                <div className="animate-spin rounded-full h-8 w-8 border border-zinc-600 border-t-white mx-auto mb-4"></div>
                <p className="text-sm text-zinc-400">Loading questions...</p>
              </div>
            ) : selectedExamCode === '' ? (
              <div className="bg-zinc-900 border border-zinc-700 rounded-lg p-8 text-center">
                <h3 className="text-lg font-medium text-white mb-2">Select an Exam Code</h3>
                <p className="text-zinc-400">Please select an exam code to view questions.</p>
              </div>
            ) : allQuestions.length > 0 ? (
              <div className="bg-zinc-900 border border-zinc-700 rounded-lg">
                <div className="p-4 border-b border-zinc-700">
                  <div className="flex justify-between items-center">
                    <p className="text-sm text-zinc-400">
                      Showing {questionsData.questions.length} of {questionsData.total} questions
                      {selectedExamCode !== '' && (
                        <span className="ml-2 px-2 py-0.5 bg-blue-800 text-blue-300 rounded text-xs">
                          {selectedExamCode}
                        </span>
                      )}
                      {searchText && (
                        <span className="ml-2 px-2 py-0.5 bg-yellow-800 text-yellow-300 rounded text-xs">
                          Search: "{searchText}"
                        </span>
                      )}
                      {selectedCategory !== 'all' && (
                        <span className="ml-2 px-2 py-0.5 bg-purple-800 text-purple-300 rounded text-xs">
                          Category: {selectedCategory}
                        </span>
                      )}
                    </p>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                        disabled={currentPage === 1}
                        className="p-1 rounded text-zinc-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <ChevronLeft className="h-4 w-4" />
                      </button>
                      <span className="text-xs text-zinc-400">
                        Page {questionsData.page} of {questionsData.totalPages}
                      </span>
                      <button
                        onClick={() => setCurrentPage(prev => Math.min(questionsData.totalPages, prev + 1))}
                        disabled={currentPage === questionsData.totalPages}
                        className="p-1 rounded text-zinc-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <ChevronRight className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
                
                <div className="divide-y divide-zinc-700">
                  {questionsData.questions.map((question, index) => {
                    const isExpanded = expandedQuestions.has(question.id);
                    return (
                      <div key={question.id} className="hover:bg-zinc-800 transition-colors">
                        {/* Question Header - Always Visible */}
                        <div className="p-3 flex items-center justify-between">
                          <div 
                            className="flex-1 min-w-0 cursor-pointer"
                            onClick={() => toggleQuestionExpanded(question.id)}
                          >
                            <div className="flex items-center space-x-2 mb-1">
                              <span className="text-xs font-mono text-zinc-500">#{(questionsData.page - 1) * questionsData.limit + index + 1}</span>
                              <span className="text-xs px-2 py-0.5 bg-zinc-800 rounded text-zinc-300">
                                {question.exam_code}
                              </span>
                              {question.level && (
                                <span className={`text-xs px-2 py-0.5 rounded ${
                                  question.level.toLowerCase() === 'easy' ? 'bg-green-800 text-green-300' :
                                  question.level.toLowerCase() === 'medium' ? 'bg-yellow-800 text-yellow-300' :
                                  question.level.toLowerCase() === 'hard' ? 'bg-red-800 text-red-300' :
                                  'bg-zinc-800 text-zinc-300'
                                }`}>
                                  {question.level}
                                </span>
                              )}
                              {question.category && (
                                <span className="text-xs px-2 py-0.5 bg-blue-800 text-blue-300 rounded">
                                  {question.category}
                                </span>
                              )}
                              {question.inactive && (
                                <span className="text-xs px-2 py-0.5 bg-red-800 text-red-300 rounded">
                                  Inactive
                                </span>
                              )}
                            </div>
                            <p className="text-sm text-white leading-relaxed">
                              {question.question}
                            </p>
                          </div>
                          <div className="ml-3 flex items-center space-x-2 flex-shrink-0">
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                openQuestionEditor(question);
                              }}
                              className="p-1 rounded text-zinc-400 hover:text-white hover:bg-zinc-700 transition-colors"
                              title="Edit question"
                            >
                              <Edit className="h-4 w-4" />
                            </button>
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                deleteQuestion(question.id);
                              }}
                              className="p-1 rounded text-zinc-400 hover:text-red-400 hover:bg-zinc-700 transition-colors"
                              title="Delete question"
                              disabled={saving}
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                            <div
                              className="cursor-pointer"
                              onClick={() => toggleQuestionExpanded(question.id)}
                            >
                              {isExpanded ? (
                                <ChevronUp className="h-4 w-4 text-zinc-400" />
                              ) : (
                                <ChevronDown className="h-4 w-4 text-zinc-400" />
                              )}
                            </div>
                          </div>
                        </div>

                        {/* Question Details - Only Visible When Expanded */}
                        {isExpanded && (
                          <div className="px-3 pb-3 border-t border-zinc-700 bg-zinc-900/50">
                            <div className="pt-3 space-y-3">
                              {/* Answers */}
                              {question.answers && question.answers.length > 0 && (
                                <div>
                                  <h4 className="text-xs font-medium text-zinc-300 mb-2">Answers:</h4>
                                  <div className="space-y-1">
                                    {question.answers.map((answer, answerIndex) => (
                                      <div key={answerIndex} className="flex items-start space-x-2">
                                        <div className={`w-1.5 h-1.5 rounded-full mt-1.5 flex-shrink-0 ${
                                          answer.isCorrect ? 'bg-green-500' : 'bg-zinc-600'
                                        }`}></div>
                                        <span className={`text-xs leading-relaxed ${
                                          answer.isCorrect ? 'text-green-300' : 'text-zinc-400'
                                        }`}>
                                          {answer.text}
                                        </span>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}

                              {/* Explanation */}
                              {question.explanation && (
                                <div>
                                  <h4 className="text-xs font-medium text-zinc-300 mb-2">Explanation:</h4>
                                  <div className="text-xs text-zinc-400 leading-relaxed">
                                    <div dangerouslySetInnerHTML={{ 
                                      __html: question.explanation.replace(/<[^>]*>/g, '')
                                    }} />
                                  </div>
                                </div>
                              )}

                              {/* JSON Data */}
                              <div>
                                <h4 className="text-xs font-medium text-zinc-300 mb-2">Raw JSON:</h4>
                                <div className="bg-zinc-800 border border-zinc-600 rounded p-2 text-xs font-mono text-zinc-300 overflow-x-auto">
                                  <pre>{JSON.stringify(question, null, 2)}</pre>
                                </div>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>
            ) : (
              <div className="bg-zinc-900 border border-zinc-700 rounded-lg p-8 text-center">
                <h3 className="text-lg font-medium text-white mb-2">No Questions Found</h3>
                <p className="text-zinc-400">No questions are available to display.</p>
              </div>
            )}
          </div>
        )}

        {/* Other tabs content will be added in separate components */}
        {activeTab !== 'overview' && activeTab !== 'questions' && (
          <div className="bg-zinc-900 border border-zinc-700 rounded-lg p-8 text-center">
            <h2 className="text-xl font-medium text-white mb-2">
              {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Management
            </h2>
            <p className="text-zinc-400">This section is under development. Coming soon!</p>
          </div>
        )}
      </main>

      {/* Question Editor Modal */}
      {editingQuestion && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-zinc-900 border border-zinc-700 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="sticky top-0 bg-zinc-900 border-b border-zinc-700 p-4 flex justify-between items-center">
              <h2 className="text-lg font-medium text-white">Edit Question</h2>
              <div className="flex items-center space-x-2">
                <button
                  onClick={saveQuestion}
                  disabled={saving}
                  className="bg-green-600 hover:bg-green-700 disabled:bg-zinc-600 text-white text-sm px-4 py-2 rounded-md transition-colors flex items-center space-x-2"
                >
                  <Save className="h-4 w-4" />
                  <span>{saving ? 'Saving...' : 'Save'}</span>
                </button>
                <button
                  onClick={closeQuestionEditor}
                  className="bg-zinc-700 hover:bg-zinc-600 text-white text-sm px-4 py-2 rounded-md transition-colors flex items-center space-x-2"
                >
                  <X className="h-4 w-4" />
                  <span>Cancel</span>
                </button>
              </div>
            </div>

            {/* Modal Content */}
            <div className="p-6 space-y-6">
              {/* Basic Fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-zinc-300 mb-2">Exam Code</label>
                  <input
                    type="text"
                    value={editingQuestion.exam_code || ''}
                    onChange={(e) => {
                      const newExamCode = e.target.value;
                      updateEditingQuestion('exam_code', newExamCode);
                      // Reset category when exam code changes
                      updateEditingQuestion('category', '');
                      // Load new categories for the new exam code
                      if (newExamCode.trim()) {
                        loadExamCategories(newExamCode);
                      } else {
                        setExamCategories([]);
                      }
                    }}
                    className="w-full px-3 py-2 bg-zinc-800 border border-zinc-600 rounded-md text-white text-sm focus:outline-none focus:border-green-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-zinc-300 mb-2">Category</label>
                  <select
                    value={editingQuestion.category || ''}
                    onChange={(e) => updateEditingQuestion('category', e.target.value)}
                    className="w-full px-3 py-2 bg-zinc-800 border border-zinc-600 rounded-md text-white text-sm focus:outline-none focus:border-green-500"
                  >
                    <option value="">Select Category</option>
                    {examCategories.map((category) => (
                      <option key={category} value={category}>
                        {category}
                      </option>
                    ))}
                  </select>
                  {examCategories.length === 0 && editingQuestion.exam_code && (
                    <p className="text-xs text-zinc-500 mt-1">
                      No categories found for exam code "{editingQuestion.exam_code}"
                    </p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-zinc-300 mb-2">Level</label>
                  <select
                    value={editingQuestion.level || ''}
                    onChange={(e) => updateEditingQuestion('level', e.target.value)}
                    className="w-full px-3 py-2 bg-zinc-800 border border-zinc-600 rounded-md text-white text-sm focus:outline-none focus:border-green-500"
                  >
                    <option value="">Select Level</option>
                    <option value="easy">Easy</option>
                    <option value="medium">Medium</option>
                    <option value="hard">Hard</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-zinc-300 mb-2">Status</label>
                  <div className="flex items-center space-x-4">
                    <label className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={!editingQuestion.inactive}
                        onChange={(e) => updateEditingQuestion('inactive', !e.target.checked)}
                        className="rounded bg-zinc-800 border-zinc-600 text-green-600 focus:ring-green-500"
                      />
                      <span className="text-sm text-zinc-300">Active</span>
                    </label>
                  </div>
                </div>
              </div>

              {/* Question Text */}
              <div>
                <label className="block text-sm font-medium text-zinc-300 mb-2">Question</label>
                <textarea
                  value={editingQuestion.question || ''}
                  onChange={(e) => updateEditingQuestion('question', e.target.value)}
                  rows={4}
                  className="w-full px-3 py-2 bg-zinc-800 border border-zinc-600 rounded-md text-white text-sm focus:outline-none focus:border-green-500"
                />
              </div>

              {/* Answers */}
              <div>
                <div className="flex justify-between items-center mb-4">
                  <label className="block text-sm font-medium text-zinc-300">Answers</label>
                  <button
                    onClick={addAnswer}
                    className="bg-blue-600 hover:bg-blue-700 text-white text-xs px-3 py-1 rounded-md transition-colors"
                  >
                    Add Answer
                  </button>
                </div>
                <div className="space-y-3">
                  {(editingQuestion.answers || []).map((answer, index) => (
                    <div key={index} className="flex items-start space-x-3 p-3 bg-zinc-800 rounded-md">
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={answer.isCorrect || false}
                          onChange={(e) => updateAnswer(index, 'isCorrect', e.target.checked)}
                          className="rounded bg-zinc-700 border-zinc-600 text-green-600 focus:ring-green-500"
                        />
                        <span className="text-xs text-zinc-400">Correct</span>
                      </div>
                      <textarea
                        value={answer.text || ''}
                        onChange={(e) => updateAnswer(index, 'text', e.target.value)}
                        rows={2}
                        placeholder="Answer text..."
                        className="flex-1 px-3 py-2 bg-zinc-700 border border-zinc-600 rounded-md text-white text-sm focus:outline-none focus:border-green-500"
                      />
                      <button
                        onClick={() => removeAnswer(index)}
                        className="p-2 text-red-400 hover:text-red-300 hover:bg-zinc-700 rounded transition-colors"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              {/* Explanation */}
              <div>
                <label className="block text-sm font-medium text-zinc-300 mb-2">Explanation</label>
                <textarea
                  value={editingQuestion.explanation || ''}
                  onChange={(e) => updateEditingQuestion('explanation', e.target.value)}
                  rows={4}
                  className="w-full px-3 py-2 bg-zinc-800 border border-zinc-600 rounded-md text-white text-sm focus:outline-none focus:border-green-500"
                />
              </div>

              {/* JSON Data */}
              <div>
                <label className="block text-sm font-medium text-zinc-300 mb-2">JSON Data (Read-only)</label>
                <div className="bg-zinc-800 border border-zinc-600 rounded-md p-4">
                  <pre className="text-xs text-zinc-300 overflow-x-auto">
                    {JSON.stringify(editingQuestion, null, 2)}
                  </pre>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
